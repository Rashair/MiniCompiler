// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  GED
// DateTime: 25/05/2020 19:47:59
// UserName: przem
// Input file <Parser.y - 25/05/2020 19:46:21>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Program=4,OpenBrace=5,CloseBrace=6,
    Return=7,Colon=8,Endl=9,Write=10,Assign=11,Plus=12,
    Minus=13,Multiplies=14,Divides=15,OpenPar=16,ClosePar=17,Eof=18,
    Error=19,Ident=20,IntNumber=21,RealNumber=22};

public struct ValueType
#line 8 "Parser.y"
{
    public string  val;
    public char    type;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[29];
  private static State[] states = new State[23];
  private static string[] nonTerms = new string[] {
      "content", "blokInstr", "openBr", "closeBr", "newline", "exp", "term", 
      "factor", "start", "$accept", "end", };

  static Parser() {
    states[0] = new State(new int[]{4,3,9,8,18,9,2,10},new int[]{-9,1,-5,6});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{9,8,5,14,2,21},new int[]{-2,4,-5,12});
    states[4] = new State(new int[]{4,3,9,8,18,9,2,10},new int[]{-9,5,-5,6});
    states[5] = new State(-2);
    states[6] = new State(new int[]{4,3,9,8,18,9,2,10},new int[]{-9,7,-5,6});
    states[7] = new State(-3);
    states[8] = new State(-16);
    states[9] = new State(-4);
    states[10] = new State(new int[]{18,11});
    states[11] = new State(-5);
    states[12] = new State(new int[]{9,8,5,14,2,21},new int[]{-2,13,-5,12});
    states[13] = new State(-6);
    states[14] = new State(new int[]{2,17,9,8,6,-15},new int[]{-1,15,-5,19});
    states[15] = new State(new int[]{6,16});
    states[16] = new State(-7);
    states[17] = new State(new int[]{18,18});
    states[18] = new State(-8);
    states[19] = new State(new int[]{9,8,6,-15},new int[]{-1,20,-5,19});
    states[20] = new State(-14);
    states[21] = new State(new int[]{18,22});
    states[22] = new State(-9);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-10, new int[]{-9,3});
    rules[2] = new Rule(-9, new int[]{4,-2,-9});
    rules[3] = new Rule(-9, new int[]{-5,-9});
    rules[4] = new Rule(-9, new int[]{18});
    rules[5] = new Rule(-9, new int[]{2,18});
    rules[6] = new Rule(-2, new int[]{-5,-2});
    rules[7] = new Rule(-2, new int[]{5,-1,6});
    rules[8] = new Rule(-2, new int[]{5,2,18});
    rules[9] = new Rule(-2, new int[]{2,18});
    rules[10] = new Rule(-3, new int[]{5,-5});
    rules[11] = new Rule(-3, new int[]{5});
    rules[12] = new Rule(-4, new int[]{-5,6});
    rules[13] = new Rule(-4, new int[]{6});
    rules[14] = new Rule(-1, new int[]{-5,-1});
    rules[15] = new Rule(-1, new int[]{});
    rules[16] = new Rule(-5, new int[]{9});
    rules[17] = new Rule(-11, new int[]{8});
    rules[18] = new Rule(-11, new int[]{18});
    rules[19] = new Rule(-6, new int[]{-6,12,-7});
    rules[20] = new Rule(-6, new int[]{-6,13,-7});
    rules[21] = new Rule(-6, new int[]{-7});
    rules[22] = new Rule(-7, new int[]{-7,14,-8});
    rules[23] = new Rule(-7, new int[]{-7,15,-8});
    rules[24] = new Rule(-7, new int[]{-8});
    rules[25] = new Rule(-8, new int[]{16,-6,17});
    rules[26] = new Rule(-8, new int[]{21});
    rules[27] = new Rule(-8, new int[]{22});
    rules[28] = new Rule(-8, new int[]{20});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 4: // start -> Eof
#line 23 "Parser.y"
                {
                   Compiler.EmitCode("// linia {0,3} :  "+ Compiler.sourceLines[lineNum - 1], lineNum);
                   Compiler.EmitCode("ldstr \"\\nEnd of execution\\n\"");
                   Compiler.EmitCode("call void [mscorlib]System.Console::WriteLine(string)");
                   Compiler.EmitCode("");
                   YYAccept();
                }
#line default
        break;
      case 5: // start -> error, Eof
#line 31 "Parser.y"
                {
                    Console.WriteLine("  line {0,3}: 'program' statement required.", lineNum);
                    ++Compiler.errors;
                    yyerrok();
                    YYAbort();
                }
#line default
        break;
      case 7: // blokInstr -> OpenBrace, content, CloseBrace
#line 40 "Parser.y"
                {
                }
#line default
        break;
      case 8: // blokInstr -> OpenBrace, error, Eof
#line 43 "Parser.y"
                {
                    Console.WriteLine("  line {0,3}: No brace matching.", lineNum);
                    ++Compiler.errors;
                    yyerrok();
                    YYAbort();
                }
#line default
        break;
      case 9: // blokInstr -> error, Eof
#line 50 "Parser.y"
                {
                    Console.WriteLine("  line {0,3}: Braces expected.", lineNum);
                    ++Compiler.errors;
                    yyerrok();
                    YYAbort();
                }
#line default
        break;
      case 16: // newline -> Endl
#line 70 "Parser.y"
                     { ++lineNum; }
#line default
        break;
      case 18: // end -> Eof
#line 75 "Parser.y"
                {
                    Console.WriteLine("  line {0,3}:  syntax error - unexpected symbol Eof", lineNum);
                    ++Compiler.errors;
                    yyerrok();
                    YYAbort();
                }
#line default
        break;
      case 19: // exp -> exp, Plus, term
#line 85 "Parser.y"
                   { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Plus, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 20: // exp -> exp, Minus, term
#line 87 "Parser.y"
                   { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Minus, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 21: // exp -> term
#line 89 "Parser.y"
                   { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 22: // term -> term, Multiplies, factor
#line 93 "Parser.y"
                   { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Multiplies, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 23: // term -> term, Divides, factor
#line 95 "Parser.y"
                   { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Divides, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 24: // term -> factor
#line 97 "Parser.y"
                   { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 25: // factor -> OpenPar, exp, ClosePar
#line 101 "Parser.y"
                   { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-2].type; }
#line default
        break;
      case 26: // factor -> IntNumber
#line 103 "Parser.y"
                   {
                   Compiler.EmitCode("ldc.i4 {0}",int.Parse(ValueStack[ValueStack.Depth-1].val));
                   CurrentSemanticValue.type = 'i'; 
                   }
#line default
        break;
      case 27: // factor -> RealNumber
#line 108 "Parser.y"
                   {
                   double d = double.Parse(ValueStack[ValueStack.Depth-1].val,System.Globalization.CultureInfo.InvariantCulture) ;
                   Compiler.EmitCode(string.Format(System.Globalization.CultureInfo.InvariantCulture,"ldc.r8 {0}",d));
                   CurrentSemanticValue.type = 'r'; 
                   }
#line default
        break;
      case 28: // factor -> Ident
#line 114 "Parser.y"
                   {
                   Compiler.EmitCode("ldloc _{0}{1}", ValueStack[ValueStack.Depth-1].val[0]=='@'?'i':'r', ValueStack[ValueStack.Depth-1].val[1]);
                   CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].val[0]=='@'?'i':'r';
                   }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 121 "Parser.y"

/* HELPER FUNCTIONS ------------------------------------------------------------------------------------------------*/

int lineNum = 1;

public Parser(Scanner scanner) : base(scanner) { }

private char BinaryOpGenCode(Tokens t, char type1, char type2)
{
    char type = ( type1=='i' && type2=='i' ) ? 'i' : 'r' ;
    if ( type1!=type )
        {
        Compiler.EmitCode("stloc temp");
        Compiler.EmitCode("conv.r8");
        Compiler.EmitCode("ldloc temp");
        }
    if ( type2!=type )
        Compiler.EmitCode("conv.r8");
    switch ( t )
        {
        case Tokens.Plus:
            Compiler.EmitCode("add");
            break;
        case Tokens.Minus:
            Compiler.EmitCode("sub");
            break;
        case Tokens.Multiplies:
            Compiler.EmitCode("mul");
            break;
        case Tokens.Divides:
            Compiler.EmitCode("div");
            break;
        default:
            Console.WriteLine($"  line {lineNum,3}:  internal gencode error");
            ++Compiler.errors;
            break;
        }
    return type;
}
#line default
}
}
